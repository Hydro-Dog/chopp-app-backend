import {
  Controller,
  Post,
  Body,
  Req,
  ForbiddenException,
} from '@nestjs/common';
import { Request } from 'express';
import { YooKassaWebhookService } from './yookassa-webhook.service';
import { OrderService } from 'src/order/order.service';
import { NotificationService } from 'src/websockets/notification/notification.service';
import { ORDER_STATUS, PAYMENT_STATUS, WS_MESSAGE_TYPE } from 'src/shared/enums';
import { isIpAllowed } from './guards/yookassa-ip-guard';

@Controller('yookassa/webhook')
export class YooKassaWebhookController {
  constructor(
    private readonly subscriptionService: YooKassaWebhookService,
    private readonly orderService: OrderService,
    private readonly notificationService: NotificationService,
  ) {}

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ÆKassa.
   * @param payload –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
   * @param req HTTP-–∑–∞–ø—Ä–æ—Å
   */
  @Post()
  async handleWebhook(
    @Body() payload: any,
    @Req() req: Request,
  ): Promise<{ status: string }> {
    const clientIp = this.extractClientIp(req);
    console.log('üèß req.ip:', req.ip);
    console.log('üèß x-forwarded-for:', req.headers['x-forwarded-for']);


    if (!isIpAllowed(clientIp)) {
      console.error(`‚ùóÔ∏è handleWebhook: IP ${clientIp} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω`, )
      throw new ForbiddenException(`IP ${clientIp} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω`);
    }

    const { event, object } = payload;

    switch (event) {
      case 'payment.succeeded':
        await this.processPaymentSucceeded(object.id);
        break;

      case 'payment.canceled':
        await this.processPaymentCanceled(object.id);
        break;

      default:
        console.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`);
        await this.notificationService.sendNotificationToAdmin<string>({
          type: WS_MESSAGE_TYPE.ORDER_STATUS,
          payload: `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`,
        });
    }

    return { status: 'ok' };
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–∫—Å–∏ –∏ IPv6 */
  private extractClientIp(req: Request): string {
    // Express –º–æ–∂–µ—Ç –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å IP –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-Forwarded-For
    const xForwardedFor = req.headers['x-forwarded-for'];
    if (typeof xForwardedFor === 'string') {
      return xForwardedFor.split(',')[0].trim();
    }

    // Fallback ‚Äî IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    return req.ip.replace('::ffff:', ''); // –£–±–∏—Ä–∞–µ–º IPv4-mapped IPv6
  }

  private async processPaymentSucceeded(transactionId: string): Promise<void> {
    await this.orderService.updateOrderPaymentStatus({
      transactionId,
      orderStatus: ORDER_STATUS.PAYMENT_SUCCEEDED,
      paymentStatus: PAYMENT_STATUS.SUCCEEDED,
    });

    await this.subscriptionService.updateSubscriptionStatus(transactionId, 'succeeded');
    await this.subscriptionService.removeSubscription(transactionId);
  }

  private async processPaymentCanceled(transactionId: string): Promise<void> {
    await this.orderService.updateOrderPaymentStatus({
      transactionId,
      orderStatus: ORDER_STATUS.PAYMENT_CANCELED,
      paymentStatus: PAYMENT_STATUS.CANCELED,
    });

    await this.subscriptionService.updateSubscriptionStatus(transactionId, 'canceled');
    await this.subscriptionService.removeSubscription(transactionId);
  }
}
